##
# @file
# Nginx configuration - main settings.
#
# Copyright © 2015, Ahmed Kamal. (https://github.com/ahmedkamals)
#
# This file is part of Ahmed Kamal's server configurations.
# ® Redistributions of files must retain the above copyright notice.
#
# @copyright     Ahmed Kamal (https://github.com/ahmedkamals)
# @link          https://github.com/ahmedkamals/dev-environment
# @package       AK
# @subpackage
# @version       1.0
# @since         2015-01-25 Happy day :)
# @license
# @author        Ahmed Kamal <me.ahmed.kamal@gmail.com>
# @modified      2015-01-25
#

##
# Basic Settings
##

charset          utf-8;
source_charset   utf-8;

# Client can make 100 successfull request inside one keep alive connection.
keepalive_requests 150;

##
# Buffers
##

# POST actions sent to Nginx. POST actions are typically form submissions.
client_body_buffer_size 10K;

# Client header size.
client_header_buffer_size 1k;

# The maximum allowed size for a client request. If the maximum size is exceeded, then Nginx will spit out a 413 error or Request Entity Too Large.
client_max_body_size 8m;

# The maximum number and size of buffers for large client headers.
large_client_header_buffers 2 1k;

##
# Timeouts
##

# Time a server will wait for a client header to be sent after request.
client_header_timeout 12;

# Time a server will wait for a client body to be sent after request.
client_body_timeout 12;

# Assigns the timeout for keep-alive connections with the client. Simply put, Nginx will close connections with the client after this period of time.
# keepalive_timeout 15;

# Established not on the entire transfer of answer, but only between two operations of reading; if after this time client will take nothing, then Nginx is shutting down the connection.
send_timeout 10;

# Allow the server to close connection on non responding client, this will free up memory.
reset_timedout_connection on;

##
# Logging Settings
##

access_log off;

# Only log critical errors
# error_log /var/log/nginx/error.log crit;

##
# Gzip Settings
##

#gzip 		  on;

# Nginx has an option that makes the server to check if a .gz-ending version of a file exists. If it does, it is sent as the response instead. This enables us to pre-compress static files (but that has to be done with another custom program).
gzip_static 	  on;
gzip_buffers      16 8k;
gzip_disable	  "msie6";

# Increasing the gzip_comp_level too high as the server will begin wasting cpu cycles.
gzip_comp_level   3;
gzip_http_version 1.1;
gzip_min_length   1000;
gzip_proxied      expired no-cache no-store private auth;
gzip_types        text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.bw-fontobject application/x-font-ttf application/x-woff font/opentype image/svg+xml;
gzip_vary 	  on;

##
# Caching Settings
##

# Open File Descriptors.
# File Descriptor modification time, their size etc.
# Error status like no permission, no file etc

# The first parameter, max=10000 tells nginx web server to only cache this many number of entries. Old inactive entries are automatically flushed out. Please note the fact that the inactive switch tells the time after which a cache entry will be removed if inactive.
open_file_cache max=10000 inactive=30s;

# Validity of a cache entry.
open_file_cache_valid    60s;

# Minimum number of times the cache entry has to be accessed before the inactive number of seconds, so that it stays in cache.
open_file_cache_min_uses 2;

# Cache errors while searching a file.
open_file_cache_errors   on;

# Limit the number of connections per single IP.
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

# Limit the number of requests for a given session.
limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

limit_conn_log_level notice;

##
# Security
##
server_tokens off;
